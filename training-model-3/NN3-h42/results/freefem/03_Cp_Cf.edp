load "MUMPS_seq"

// Get mesh index and solution type
int nummesh;     // Mesh index
cout << "Insert bump height:" << endl;
cin >> nummesh;

// Physical parameters
real Retheta    = 2500; // Reynolds number
real Umax       = 16.8;
real deltatheta = 0.0036;
real nu         = Umax * deltatheta / Retheta ;

real toler   = 1.e-6;

// Mesh and FEM Building
mesh th = readmesh("../../../../mesh/mesh_training/h"+nummesh+"/mesh_bump_h"+nummesh+".msh");
func Pku     = P1b;
func Pkp     = P1;
fespace fuupu(th,[Pku,Pku,Pkp,Pku]);       // (u,v,p,nut) RANS flow
fespace fuup(th,[Pku,Pku,Pkp]);        	   // (u,v,p) flow
fespace fu(th,Pku);                        // velocity component
fespace fp(th,Pkp);                        // pressure
fespace fuu(th,[Pku,Pku]);                 // (fx,fy)
fespace P1h(th,P1);                        // P1 FEM space

// Variable declaration
fu u,v,nut;
fp p;
P1h tempu1,tempu2,dxu,dxv,dyu,dyv;

// Declare variables and load solution

fuup [ub,vb,pb];          // RANS flow
fu   fx;                  // (fx,fy) flow
{
  ifstream file("./results/h"+nummesh+"/nn-solution-mesh-"+nummesh+".txt");
  file >> ub[];
  file >> fx[];
	u = ub;
	v = vb;
	p = pb;
}

varf mass(phi,phih) = int2d(th)( phi*phih );	
varf DX(phi,phih)   = int2d(th)( dx(phi)*phih );		
varf DY(phi,phih)   = int2d(th)( dy(phi)*phih );			

matrix DDX,DDY,Mu;
DDX = DX(P1h,P1h);					
DDY = DY(P1h,P1h);					
Mu  = mass(P1h,P1h,solver=sparsesolver);					

// To extract Cp,Cf
tempu1   = u; 
tempu2[] = DDX*tempu1[]; 
dxu[]    = Mu^-1*tempu2[];
tempu1   = u;    
tempu2[] = DDY*tempu1[]; 
dyu[]    = Mu^-1*tempu2[];
tempu1   = v;    
tempu2[] = DDX*tempu1[]; 
dxv[]    = Mu^-1*tempu2[];
tempu1   = v;    
tempu2[] = DDY*tempu1[]; 
dyv[]    = Mu^-1*tempu2[];

// Load distance function to compute Cp,Cf
P1h d;

{
	load "distance"
	P1h lset,rhslset;
	varf Lap(u,v) = int2d(th)( dx(u)*dx(v) + dy(u)*dy(v) + u*v ) + on(2,u=0.);
	varf RHS(u,v) = int2d(th)( 1.0*v ) + on(2,u=0.);
	matrix KK     = Lap(P1h,P1h,solver=sparsesolver,tgv=-1);
	rhslset[]     = RHS(0,P1h,tgv=-1);
	lset[]        = KK^-1*rhslset[];
	plot(lset);
	
	distance(th,lset,d[]);
	plot(d);
}

P1h XX = x; plot(XX,cmm="x");
P1h YY = y; plot(YY,cmm="y"); 

// Loop to find how many nodes there are on the wall
int Nx = 0;
for(int ij = 0; ij < P1h.ndof; ij++){ 
	if( ( d( XX[][ij] , YY[][ij] ) < toler ) && ( YY[][ij] < 1.1 ) ) Nx += 1; 
}

// Loop to extract those nodes
real[int] Xc(Nx),Yc(Nx),XXc(Nx),YYc(Nx),dxf(Nx),nx(Nx),ny(Nx);
int ix = 0;
for(int ij = 0; ij < P1h.ndof; ij++){
	if( ( d( XX[][ij] , YY[][ij] ) < toler ) && ( YY[][ij] < 1.1 ) ){
		XXc(ix) = XX[][ij]; Xc(ix) = XXc(ix);
		YYc(ix) = YY[][ij]; Yc(ix) = YYc(ix);
		ix    += 1;
	}	
}

// at this point, we need to sort the wall elements so that Xc[i+1]>Xc[i]
// We do the dummest (but easiest) sorting algorithm, sacles with O(N^2)
real auxx,auxy;
for(int ix1 = 0; ix1 < Nx; ix1++){
	real minx = Xc[ix1];
	for(int ix2 = ix1; ix2 < Nx; ix2++){
		if(minx>XXc[ix2]){
			minx    = Xc(ix2);
			auxx    = Xc(ix1);
			auxy    = Yc(ix1);
			Xc(ix1) = Xc(ix2);
			Yc(ix1) = Yc(ix2);
			Xc(ix2) = auxx;
			Yc(ix2) = auxy;
		}
	}
}

// We compute derivatives of the geometry itself, using second-order finite difference
// We then extract Cp,Cf
{
	ofstream file("./results/h"+nummesh+"/X-Y-Cp-Cf-h"+nummesh+".dat");	
}

cout << "Pref: " << p(Xc[0],Yc[0]) << endl;

for(ix = 0; ix < Nx; ix++){
	if(ix==0)        { dxf(0)    = ( Yc(1)    - Yc(Nx-1) ) / ( Xc(1)    - Xc(Nx-1) ); }
	else if(ix==Nx-1){ dxf(Nx-1) = ( Yc(0)    - Yc(Nx-2) ) / ( Xc(0)    - Xc(Nx-2) ); }
	else             { dxf(ix)   = ( Yc(ix+1) - Yc(ix-1) ) / ( Xc(ix+1) - Xc(ix-1) ); }
	
	// Wall-normal
	nx[ix] = - dxf[ix]/sqrt( 1. + (dxf[ix])^2 );
	ny[ix] =   1.     /sqrt( 1. + (dxf[ix])^2 );
	
	// Wall pressure and friction
	real Cp,Cf;
	Cf = nu*(  ny[ix]*( nx[ix]*2.*dxu(Xc[ix],Yc[ix]) + ny[ix]*(dxv(Xc[ix],Yc[ix]) +dyu(Xc[ix],Yc[ix]) )) 
				- nx[ix]*( ny[ix]*2.*dyv(Xc[ix],Yc[ix]) + nx[ix]*(dyu(Xc[ix],Yc[ix]) +dxv(Xc[ix],Yc[ix]) )) );
	Cp = (p(Xc[ix],Yc[ix])-p(Xc[0],Yc[0]));
	{
		ofstream file("./results/h"+nummesh+"/X-Y-Cp-Cf-h"+nummesh+".dat",append);
		file << Xc[ix] << " " << Yc[ix] << " " << Cp << " " << Cf << endl;		
	}
}

// Get mesh index and solution type
int nummesh;     // Mesh index
cout << "Insert bump height:" << endl;
cin >> nummesh;

// Parameters
real Re = 2500;     // Re_theta
real Umax = 16.8;   // Free-stream velocity
real delta = 0.0036;// delta_theta
real nu = Umax * delta / Re ;
func Pku = P1b;     // Polynomial type for velocity
func Pkp = P1;      // Polynomial type for pressure

// Read mesh and create finite element space

mesh th = readmesh("../mesh/mesh_training/h"+nummesh+"/mesh_bump_h"+nummesh+".msh");
fespace fuupu(th,[Pku,Pku,Pkp,Pku]);
fespace fuup(th,[Pku,Pku,Pkp]);
fespace fu(th,Pku);
int ndof = fuupu.ndof;
int nbv = th.nv;
int nbt = th.nt;

// Declare variables and load solution

fuup [ub,vb,pb];fu nutb;
{
	ifstream file("./results/h"+nummesh+"/baseline-solution-h"+nummesh+"-Re-"+Re+".txt");
	file >> ub[];
	file >> nutb[];
}

// For Spallart Almaras
real cv1 = 7.1;
fu xi,xi2,xi3,fv1,nuT;

xi = nutb/nu;
xi2 = xi*(nutb/nu);
xi3 = xi2*(nutb/nu);
fv1 = (xi3)/(xi3 + cv1^3);
nuT = nutb*fv1;

// Export tecplot file

{
  ofstream file("./results/h"+nummesh+"/baseline-solution-h"+nummesh+"-Re-"+Re+"-tecplot.dat");
  file <<"TITLE = "<<"BUMP"<<endl;
  file << "VARIABLES = \"X\" ,  \"Y\" , \"ub\" , \"vb\" , \"pb\" , \"nut-SA\" , \"nuT\" " << endl;
  //file << "ZONE NODES=" << nbv << " , ELEMENTS = " << nbt << " , DATAPACKING = POINT , ZONETYPE=FETRIANGLE " << endl;
  file << "ZONE"<<"   "<<"N="<<th.nv<<","<<"E="<<th.nt<<","<<"F=FEPOINT,ET=TRIANGLE"<<endl;
  
  for (int i=0; i<nbv; i++){
  real xt = th(i).x;
  real yt = th(i).y;
  file << xt << " " << yt << " " << ub(xt,yt) << " " << vb(xt,yt) << " " << pb(xt,yt) << " " << nutb(xt,yt) << " " << nuT(xt,yt) << endl;
  };
  
  // List connectivity
  for (int k=0; k<nbt; k++){
  file << int(th[k][0])+1 << " " << int(th[k][1])+1 << " " << int(th[k][2])+1 << endl;
  };
};

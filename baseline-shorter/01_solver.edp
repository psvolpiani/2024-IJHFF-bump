load "MUMPS_seq"

////////////////////////////////////
/////  Get mesh and Re number   ////
////////////////////////////////////

int nummesh;   // Mesh index
cout << "Insert bump height:" << endl;
cin >> nummesh;

////////////////////////////////
/////  Physical parameters  ////
////////////////////////////////
cout << "Setting up the parameters" << endl;

real Retheta, Retheta0, nu;
real[int] Res = [10,50,75,100,200,400,800,1200,1600,2000,2500];

real Umax       = 16.8;
real deltatheta = 0.0036;

////////////////////////////////
///// Numerical parameters  ////
////////////////////////////////
real tolnewton,err,errorratio;
real Res0inf,Resninf,Res0L2,ResnL2,CFLmin,CFLmax,CFL,deltap;
int inewton,inewtonmax,iwait;

tolnewton    = 1.e-7;
inewtonmax   = 20;
iwait        = 0;
CFLmin       = 10000; 
CFLmax       = 1.e+10;

real M     = 0.00001;
real MSUPG = 0.1;
real a     = 100;

func Pku = P1b;
func Pkp = P1;
int k    = 2; // degree of the polynoms (2 for P2dc ...)
int kp   = 1; //Order of interpolation for the pressure
int qfo  = 3*k+1; //order of quadrature

///////////////////////////////////////
////  Import reference solution   /////
///////////////////////////////////////

cout << "Importing reference solution" << endl;
mesh the = readmesh("../mesh/mesh_interp/h"+nummesh+"/mesh_bump_h"+nummesh+".msh");
fespace fue(the,Pku);
fespace fpe(the,Pkp);
fue ue, ve, nute;
fpe pe;

{
  ifstream file("../reference/results/h"+nummesh+"/reference-Ue-Ve-Pe-nute-h"+nummesh+".txt");
  file >> ue[]  ;
  file >> ve[]  ;
  file >> pe[]  ;
  file >> nute[] ;
}

plot(ue,value=1,wait=iwait,cmm="ue");
plot(ve,value=1,wait=iwait,cmm="ve");
plot(pe,value=1,wait=iwait,cmm="pe");
plot(nute,value=1,wait=iwait,cmm="nute");

/////////////////////////////////////////////////////
///// Fixed parameters for the turbulent model //////
/////////////////////////////////////////////////////

real nutinf = 3.;
real cv1    = 7.1;
real cb1    = 0.1355;
real cb2    = 0.622;
real sigma  = 2./3.;
real kk     = 0.41;
real cw1    = 0.1355/(kk^2.) + (1.+cb2)/sigma;
real cw2    = 0.3;
real cw3    = 2.;


///////////////////////////
/////  Mesh Building  /////
///////////////////////////
cout << "Building Mesh" << endl;

mesh th = readmesh("../mesh/mesh_training/h"+nummesh+"/mesh_bump_h"+nummesh+".msh");
int nbv = th.nv;
int nbt = th.nt;
////////////////////////////////////////////
/////  Elements and Spaces Definition  /////
///////////////////////////////////////////
fespace fuupu(th,[Pku,Pku,Pkp,Pku]);
fespace fuup(th,[Pku,Pku,Pkp]);
fespace fu(th,Pku);
fespace fp(th,Pkp);
fespace f1(th,P1);
fespace f0(th,P0);

/////////////////////////////////
////   Variable declaration  ////
/////////////////////////////////

// Flow variables to solve
fuup [auxu,auxv,auxp];
fuupu [u,v,p,nut],[ub,vb,pb,nutb],[rhsu,rhsv,rhsp,rhsnut];
fu auxnut;

// For boundary conditions 
fu ubord,vbord,Nutinf; fp pbord;
ubord = ue; vbord = ve; pbord = pe; Nutinf = nute;

// For initial conditions
fuup [u0,v0,p0]; fu nut0;

// For Spallart Almaras
fu xi,xi2,xi3,csiSA,dcsiSAdnut,csiNS,dcsiNSdnut,S,dSduv,fv1,dfv1dnu,nuT,fv2,dft2dnu,dStildeduv,dsddxnu,dsddynu,gn,dgndxi;
f0 S0,Sbar,dSbardnu,Stilde,dStildednu,r,rp,drdnu,drduv,g,dgdr,fw,dfwdg,dfwdnu,dfwduv,d,d2,normu;
f0 su,dsdnuu,dsduvu;
f0 s,dsdnu,dsduv;

// For definition of local time step 
f0 dtlocal,tloc; 

fu dxub,dyub,dxvb,dyvb,dxnutb,dynutb;
fu tempu1,tempu2;

// For stabilization
fu TauSUPG,NormeT,ReT,chiT;
fu dNormeTdu,dNormeTdv,dReTdu,dReTdv,dchiT,dTauSUPGdu,dTauSUPGdv;
f0 hT,hT2;

// The definition of the mesh size hT may be different if the considered mesh has high-aspect-ratio elements (hT) or rather well balanced ones (hT2)
hT2  = sqrt(2.)*area/hTriangle;
hT   = hTriangle;
//plot(hT2,cmm="max h",value=1,wait=iwait);
//plot(hT ,cmm="min h",value=1,wait=iwait);

matrix A,DDX,DDY,Mu;



/////////////////////////////////////
////  Import wall distance       ////
/////////////////////////////////////

cout << "Importing wall distance" << endl;
{
	ifstream file("../mesh/mesh_training/h"+nummesh+"/distance-wall-h"+nummesh+".txt");
	file >> d[];
	plot(d,value=true,cmm="d",wait=iwait);
	d2 = d*d;
}

/////////////////////////////////////////
////    Variational Formulation      ////
/////////////////////////////////////////

varf vA([u,v,p,nut],[uh,vh,ph,nuth]) = int2d(th,qforder=qfo)(   
	  (1./dtlocal)*( u*uh + v*vh - (1./(a*a))*p*ph + nut*nuth)
	+ csiNS         *( 2.*dx(u )*dx(uh) + (dy(u )+dx(v ))*dx(vh) + (dx(v )+dy(u ))*dy(uh) + 2.*dy(v )*dy(vh) )							
	+ dcsiNSdnut*nut*( 2.*dx(ub)*dx(uh) + (dy(ub)+dx(vb))*dx(vh) + (dx(vb)+dy(ub))*dy(uh) + 2.*dy(vb)*dy(vh) )
	- (dx(u) + dy(v))*ph - ( dx(uh) + dy(vh) )*p
	+ ( u *dx(ub) + ub*dx(u ) + v *dy(ub) + vb*dy(u) ) * ( uh + TauSUPG * ( ub*dx(uh) + vb*dy(uh) ) )
	+ ( u *dx(vb) + ub*dx(v ) + v *dy(vb) + vb*dy(v) ) * ( vh + TauSUPG * ( ub*dx(vh) + vb*dy(vh) ) )
	+ ( ub*dx(ub)             + vb*dy(ub)            ) * (      TauSUPG * ( u *dx(uh) + v *dy(uh) ) + (dTauSUPGdu*u+dTauSUPGdv*v) * ( ub*dx(uh) + vb*dy(uh) ) )
	+ ( ub*dx(vb)             + vb*dy(vb)            ) * (      TauSUPG * ( u *dx(vh) + v *dy(vh) ) + (dTauSUPGdu*u+dTauSUPGdv*v) * ( ub*dx(vh) + vb*dy(vh) ) )
	+ (1./sigma)*csiSA         *(dx(nut )*dx(nuth) + dy(nut )*dy(nuth)) 
	+ (1./sigma)*dcsiSAdnut*nut*(dx(nutb)*dx(nuth) + dy(nutb)*dy(nuth))
	+ ( ub*dx(nut ) + vb*dy(nut ) + u*dx(nutb) + v*dy(nutb) ) * ( nuth + TauSUPG * ( ub*dx(nuth) + vb*dy(nuth) ) )
	+ ( ub*dx(nutb) + vb*dy(nutb)                           ) * (        TauSUPG * ( u *dx(nuth) + v *dy(nuth) ) + (dTauSUPGdu*u+dTauSUPGdv*v) * ( ub*dx(nuth) + vb*dy(nuth) ) )
	- dsdnu*nut*nuth
	- dsduv*(dy(u) - dx(v))*nuth 
	- (dsddxnu*dx(nut) + dsddynu*dy(nut))*nuth )
        + on(1,2,4,u=1.,v=1.,nut=1.); // BC

varf vrhs([u,v,p,nut],[uh,vh,ph,nuth]) = - int2d(th,qforder=qfo)(       
	  csiNS*( 2.*dx(ub)*dx(uh) + (dy(ub)+dx(vb))*dx(vh) + (dx(vb)+dy(ub))*dy(uh) + 2.*dy(vb)*dy(vh) ) 
	- (dx(ub) + dy(vb))*ph - ( dx(uh) + dy(vh) )*pb 
        + ( ub*dx(ub) + vb*dy(ub) ) * ( uh + TauSUPG*(ub*dx(uh) + vb*dy(uh) ) ) 
	+ ( ub*dx(vb) + vb*dy(vb) ) * ( vh + TauSUPG*(ub*dx(vh) + vb*dy(vh) ) )
	+ (1./sigma)*csiSA*(dx(nutb)*dx(nuth) + dy(nutb)*dy(nuth)) 
	+ ( ub*dx(nutb) + vb*dy(nutb) ) * ( nuth + TauSUPG*(ub*dx(nuth)+vb*dy(nuth)) )
	- s*nuth )
        + on(1,4,u=ubord-ub,v=vbord-vb,nut=Nutinf-nutb) + on(2,u=-ub,v=-vb,nut=-nutb); // BC

// Varfs for derivatives
varf mass(u,uh) = int2d(th,qforder=qfo)( u*uh );
varf DX(u,uh)   = int2d(th,qforder=qfo)( dx(u)*uh );
varf DY(u,uh)   = int2d(th,qforder=qfo)( dy(u)*uh );
	
/////////////////////////////////////////
///// Matrix definition            //////
/////////////////////////////////////////
cout << "Matrix definition" << endl;

DDX = DX(fu,fu);
DDY = DY(fu,fu);
Mu  = mass(fu,fu,solver=sparsesolver);

/////////////////////////////////////////
///// Loop for Reynolds number     //////
/////////////////////////////////////////

for(int iRe = 1; iRe < Res.n+1; iRe++){
    inewton       = 0;
    err           = 1;
      
    Retheta       = Res[iRe-1];       // Reynolds number
    nu            = Umax * deltatheta / Retheta;

    cout << "-----------" << endl;
    cout << "Reynolds number:" << Retheta << endl;

    ////////////////////////////////
    /////  Initial condition   /////
    ////////////////////////////////

    cout << "Setting initial condition" << endl;
    
    if(iRe > 1){
        Retheta0      = Res[iRe-2];     // Previous Reynolds number

        {
    
          ifstream file("./results/h"+nummesh+"/baseline-solution-h"+nummesh+"-Re-"+Retheta0+".txt");
    
          file >> u0[];
    
          file >> nut0[];
    
        }

        [ub,vb,pb,nutb] = [u0,v0,p0,nut0];
    }
    else{
        [ub,vb,pb,nutb] = [ubord,vbord,0.0,0.0001];
    }
       
    plot(ub,value=1,wait=iwait);
    plot(nutb,value=1,wait=iwait);
    
    //////////////////////////////////////////////////////
    ///////////    Loop for Newton method    /////////////
    //////////////////////////////////////////////////////

    cout << "Entering loop" << endl;

    while( (err > tolnewton) && (inewton<=inewtonmax)){
    	inewton += 1;
    	cout << " " << endl;
    	cout << "Iteration " << inewton << endl;	
    
    	real clock0= clock();
    	
    	// Computation of derivatives of (ub,vb) and nutb
    	tempu1 = ub;    tempu2[] = DDX*tempu1[]; dxub[]   = Mu^-1*tempu2[];
    	tempu1 = ub;    tempu2[] = DDY*tempu1[]; dyub[]   = Mu^-1*tempu2[];
    	tempu1 = vb;    tempu2[] = DDX*tempu1[]; dxvb[]   = Mu^-1*tempu2[];
        tempu1 = vb;    tempu2[] = DDY*tempu1[]; dyvb[]   = Mu^-1*tempu2[];
    	tempu1 = nutb;  tempu2[] = DDX*tempu1[]; dxnutb[] = Mu^-1*tempu2[];
        tempu1 = nutb;  tempu2[] = DDY*tempu1[]; dynutb[] = Mu^-1*tempu2[];
    
    	// Computation of SA functions	
    	xi = nutb/nu;
    	xi2 = xi*(nutb/nu);
    	xi3 = xi2*(nutb/nu);
    	csiSA = (xi>=0.)*nu*(1.+xi) + (xi<0.)*nu*(1.+xi+0.5*xi2);
    	dcsiSAdnut = (xi>=0.)*1. + (xi<0.)*(1.+xi);
    	fv1 = (xi3)/(xi3 + cv1^3);
    	dfv1dnu = (3./nu)*(cv1^3)*(xi2)/((xi3+cv1^3)^2);
    	nuT = nutb*fv1;
    	csiNS = nu + (nuT>=0.)*nuT;
    	dcsiNSdnut = (nuT>=0.)*(fv1 + nutb*dfv1dnu);
    	S = sqrt((dyub - dxvb)^2 + M^2 ) - M;
        S0 = S;
        dSduv = (dyub - dxvb)/sqrt( (dyub - dxvb)^2 + M^2 );
    	fv2 = 1. - xi/( 1. + xi*fv1 );
        Sbar = nutb*fv2/(kk*kk*d2);
        dSbardnu = (1./(kk*kk*d2))*( fv2 + xi*(nu*xi2*dfv1dnu - 1.)/((1.+xi*fv1)^2) );
        Stilde = Sbar + S0;
        dStildednu = dSbardnu;
        dStildeduv = dSduv;
    	rp = nutb/(Stilde*kk*kk*d2);
        r = (rp<0. || rp>10.)*(10.) + (rp>=0. && rp<=10.)*rp;
        drdnu = (rp>=0. && rp<=10.)*r*(1./nutb - dStildednu/Stilde);
        drduv = (rp>=0. && rp<=10.)*( - r*dStildeduv/Stilde );
    	g = r + cw2*(r^6-r);
     	dgdr = 1. + cw2*(6.*r^5-1.);
    	
    	fw = g*(( 1. + cw3^6 )/( g^6 + cw3^6 ) )^(1./6.);
    	dfwdg = (((1.+cw3^6)/(g^6+cw3^6))^(1./6.))*( 1. - (g^6)/(g^6+cw3^6) );
    	dfwdnu = dfwdg*dgdr*drdnu;
    	dfwduv = dfwdg*dgdr*drduv;
     	
        gn = 1. - 1000.*xi2/( 1. + xi2 );
        dgndxi = - 2000.*xi/( ( 1. + xi2 )^2 );
    
        su =      (xi>=0.)*( cb1*Stilde*nutb - cw1*fw*(nutb^2)/d2 + (cb2/sigma)*(dxnutb^2 + dynutb^2) ) 
    		+ (xi< 0.)*( cb1*S*nutb*gn   + cw1*(nutb^2)/d2    + (cb2/sigma)*(dxnutb^2 + dynutb^2) );
        s = su;
    
        dsdnuu = (xi>=0.)*( cb1*(dStildednu*nutb + Stilde) - cw1*( dfwdg*dgdr*drdnu*nutb*nutb/d2 + 2.*fw*nutb/d2 ) ) 
    		+ (xi<0.)*( cb1*S*(gn + xi*dgndxi) + 2.*cw1*nutb/d2 );
        dsdnu = dsdnuu;
    
    	dsduvu = (xi>=0.)*( cb1*nutb*dStildeduv - cw1*nutb*nutb*dfwdg*dgdr*drduv/d2 ) + (xi<0.)*cb1*nutb*gn*dSduv;
        dsduv = dsduvu;
    
    	dsddxnu = ( 2.*cb2*dxnutb/sigma );
        dsddynu = ( 2.*cb2*dynutb/sigma );
    
    	// Stabilization
    	NormeT     = sqrt( ub*ub+vb*vb + MSUPG^2);
    	ReT        = 0.5*NormeT*hT/nu;
    	chiT       = (ReT<=3)*(ReT/3.) + (ReT>3)*(1.);
    	TauSUPG    = chiT*hT/(2.*NormeT);
    	dNormeTdu  = ub/sqrt( ub*ub+vb*vb + MSUPG^2);
    	dNormeTdv  = vb/sqrt( ub*ub+vb*vb + MSUPG^2);
    	dReTdu     = 0.5*hT*dNormeTdu/nu;
    	dReTdv     = 0.5*hT*dNormeTdv/nu;
    	dchiT      = (1./3.)*(ReT<3.);
    	dTauSUPGdu = (hT/2.)*( - (chiT/(NormeT^2))*dNormeTdu + dchiT*dReTdu/NormeT );
    	dTauSUPGdv = (hT/2.)*( - (chiT/(NormeT^2))*dNormeTdv + dchiT*dReTdv/NormeT );
    	//plot(TauSUPG,value=1,fill=1,wait=iwait,cmm="TauSUPG");
    	//plot(dTauSUPGdu,value=1,fill=1,wait=iwait,cmm="dTauSUPGdu");
    	//plot(dTauSUPGdv,value=1,fill=1,wait=iwait,cmm="dTauSUPGdv");
    
    	real clock1 = clock();
    	cout << "Time for computing SA functions : " << (clock1-clock0) << endl;
    	
    	///////////////////////////////////////
    	// Construction of right-hand side ////	
    	///////////////////////////////////////
    
    	rhsu[] = vrhs(0,fuupu);	
    	
    	if(inewton==1){ Res0L2 = rhsu[].l2; Res0inf = rhsu[].linfty; }
    
    	////////////////////////////////
        // Compute norm of residual ////
        ////////////////////////////////
    	
    	ResnL2 = rhsu[].l2; Resninf = rhsu[].linfty;
    	errorratio = max(ResnL2/Res0L2,Resninf/Res0inf);
    	err = max(ResnL2,Resninf);
    
    	plot(rhsu,value=true,cmm="rhsu",wait=iwait);
    	//plot(rhsv,value=true,cmm="rhsv",wait=iwait);
    	//plot(rhsp,value=true,cmm="rhsp",wait=iwait);
    	plot(rhsnut,value=true,cmm="rhsnut",wait=iwait);
    
    	cout << "iter=  " << inewton << " , resl2=  " << ResnL2 << " , resinf=  " << Resninf << endl;
    
    	if(err<tolnewton) break;
    
        ///////////////////////////////////////
        // Compute Local time step (dtloc) ////
        // dtloc = CFL*hTriangle/||u||     ////
   	///////////////////////////////////////
    		
    	CFL = min(CFLmin/(errorratio^1.5),CFLmax)*inewton;
    	tloc = min(hTriangle/(sqrt(ub^2 + vb^2) + sqrt(ub^2 + vb^2 + a*a) ),0.5*hTriangle*hTriangle/nu);
    	dtlocal = CFL*tloc;
    
    	//plot(dtlocal,value=true,cmm="dtlocal",wait=iwait);
    	
    	real clock2 = clock();
    	
    	cout << "Time for computing residual : " << (clock2-clock1) << endl;
    
    	//////////////////////////////
        // Construction of matrix ////
        //////////////////////////////
    	
    	A = vA(fuupu,fuupu,solver=GMRES);
    
    	real clock3 = clock();
    	cout << "Time for matrix construction : " << (clock3-clock2) << endl;
    	
    	//////////////////////////////
        // Factorization of matrix ///
        //////////////////////////////
    	
    	set(A,solver=sparsesolver);	
    	real clock4 = clock();
    	cout << "Time for matrix LU : " << (clock4-clock3) << endl;
    
        ////////////////
    	// Resolution //
    	////////////////
    
    	u[] = A^-1*rhsu[];
    	ub[] += u[];	
    	real clock5 = clock();
    	
    	plot(ub,value=true,cmm="ub-CFL="+CFL,wait=iwait);
    	//plot(vb,value=true,cmm="vb",wait=iwait);
    	//plot(pb,value=true,cmm="pb",wait=iwait);
    	plot(nutb,value=true,cmm="nutb",wait=iwait);	
    	plot(nuT,value=true,cmm="nuT",wait=iwait);
    	plot(csiNS,value=true,cmm="csiNS",wait=iwait);
    }
    
	if(err < tolnewton){
    		// Save the solution in the format [ub,vb,pb] and [nutb]
    		fuup [ubb,vbb,pbb] = [ub,vb,pb];
    		fu nutbb = nutb;
    		ofstream file("./results/h"+nummesh+"/baseline-solution-h"+nummesh+"-Re-"+Retheta+".txt");
    		file << ubb[];
    		file << nutbb[];
		}
	else{
		cout << "Did not converge for Re =" << Retheta << endl;
		break;
	    }

} // end of for loop

////////////////////////////////////
////  Write in tecplot format   ////
////////////////////////////////////

if(Retheta == 2500){

{
  ofstream file("./results/h"+nummesh+"/baseline-solution-h"+nummesh+"-Re-"+Retheta+"-tecplot.dat");
  file <<"TITLE = "<<"PHILL"<<endl;
  file << "VARIABLES = \"X\" ,  \"Y\" , \"ub\" , \"vb\" , \"pb\" , \"nutb\" , \"nuT\" " << endl;
  //file << "ZONE NODES=" << nbv << " , ELEMENTS = " << nbt << " , DATAPACKING = POINT , ZONETYPE=FETRIANGLE " << endl;
  file << "ZONE"<<"   "<<"N="<<th.nv<<","<<"E="<<th.nt<<","<<"F=FEPOINT,ET=TRIANGLE"<<endl;
  
  for (int i=0; i<nbv; i++){
  real xt = th(i).x;
  real yt = th(i).y;
  file << xt << " " << yt << " " << ub(xt,yt) << " " << vb(xt,yt) << " " << pb(xt,yt) << " " << nutb(xt,yt) << " " << nuT(xt,yt) << endl;
  };
  
  // List connectivity
  for (int k=0; k<nbt; k++){
  file << int(th[k][0])+1 << " " << int(th[k][1])+1 << " " << int(th[k][2])+1 << endl;
  };
};
}

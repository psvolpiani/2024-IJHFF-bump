//////////////////////
// Get mesh number //
/////////////////////

int nummesh;   // Mesh index
cout << "Insert bump height:" << endl;
cin >> nummesh;

////////////////////////////////
// Create mesh and FEM spaces //
///////////////////////////////

mesh th = readmesh("../mesh/mesh_interp/h"+nummesh+"/mesh_bump_h"+nummesh+".msh");
func Pku = P1b;
func Pkp = P1;
fespace fu(th,P1);
fespace f6u1p(th,[Pku,Pku,Pku,Pku,Pku,Pku,Pkp]);

////////////////////////////////
// Import interpolation files //
///////////////////////////////

int ii,j,NN;
ifstream fileX("./results/h"+nummesh+"/reference-interp-tecplot-h"+nummesh+"-X.dat"); fileX >> NN;
ifstream fileY("./results/h"+nummesh+"/reference-interp-tecplot-h"+nummesh+"-Y.dat"); fileY >> NN;
ifstream fileU("./results/h"+nummesh+"/reference-interp-tecplot-h"+nummesh+"-U.dat"); fileU >> NN;
ifstream fileV("./results/h"+nummesh+"/reference-interp-tecplot-h"+nummesh+"-V.dat"); fileV >> NN;
ifstream fileUU("./results/h"+nummesh+"/reference-interp-tecplot-h"+nummesh+"-UU.dat"); fileUU >> NN;
ifstream fileVV("./results/h"+nummesh+"/reference-interp-tecplot-h"+nummesh+"-VV.dat"); fileVV >> NN;
ifstream fileWW("./results/h"+nummesh+"/reference-interp-tecplot-h"+nummesh+"-WW.dat"); fileWW >> NN;
ifstream fileUV("./results/h"+nummesh+"/reference-interp-tecplot-h"+nummesh+"-UV.dat"); fileUV >> NN;
ifstream fileP("./results/h"+nummesh+"/reference-interp-tecplot-h"+nummesh+"-P.dat"); fileP >> NN;

cout << "number of points : " << NN << endl;
real[int] X(NN),Y(NN),U(NN),V(NN),UU(NN),VV(NN),WW(NN),UV(NN),P(NN);

for(ii=0;ii<NN;ii++){
  fileX  >> X(ii);
  fileY  >> Y(ii);
  fileU  >> U(ii);
  fileV  >> V(ii);
  fileUU >> UU(ii);
  fileVV >> VV(ii);
  fileWW >> WW(ii);
  fileUV >> UV(ii);
  fileP  >> P(ii);
}

cout << "Max of X  : " << X.max << endl;
cout << "Max of Y  : " << Y.max << endl;
cout << "Max of U  : " << U.max << endl;
cout << "Max of V  : " << V.max << endl;
cout << "Max of UU : " << UU.max << endl;
cout << "Max of VV : " << VV.max << endl;
cout << "Max of WW : " << WW.max << endl;
cout << "Max of UV : " << UV.max << endl;
cout << "Max of P  : " << P.max << endl;

//////////////////////////////
// Check mesh compatibility //
/////////////////////////////

real dist,distmin;
int k;
fu Uff,Vff,UUff,VVff,WWff,UVff,Pff;
if( abs(th.nv - NN)>0 ){
	cout << "Incompatibility" << endl;
}
else{
	cout << "Compatibility" << endl;
}


for( ii=0 ; ii<th.nv ; ii++ ){
	distmin = 1000000.;
  cout << "ii : " << ii << endl;
	for( j=0 ; j<NN ; j++ ){
		dist = ( th(ii).x - X(j) )^2 + ( th(ii).y - Y(j) )^2;
		if( dist < distmin ){
			distmin = dist;
			k = j;
		}
	}
	Uff[][ii]    = U(k);
	Vff[][ii]    = V(k);
	UUff[][ii]   = UU(k);
  VVff[][ii]   = VV(k);
  WWff[][ii]   = WW(k);
  UVff[][ii]   = UV(k);
  Pff[][ii]    = P(k);
}

plot(Uff);
plot(Vff);
plot(UUff);
plot(VVff);
plot(WWff);
plot(UVff);
plot(Pff);

////////////////////
// Write results //
//////////////////

f6u1p [ue,ve,uue,vve,wwe,uve,pe] = [Uff,Vff,UUff,VVff,WWff,UVff,Pff];
plot(ue);
plot(ve);

{
  ofstream file("./results/h"+nummesh+"/reference-Ue-Ve-UUe-VVe-WWe-UVe-Pe-h"+nummesh+".txt");
  file.precision(16);
  file << ue[];
}
